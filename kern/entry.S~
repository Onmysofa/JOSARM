/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>

# Shift Right Logical 
#define SRL(val, shamt)		(((val) >> (shamt)) & ~(-1 << (32 - (shamt))))


###################################################################
# The kernel (this code) is linked at address ~(KERNBASE + 1 Meg), 
# but the bootloader loads it at address ~1 Meg.
#	
# RELOC(x) maps a symbol x from its link address to its actual
# location in physical memory (its load address).	 
###################################################################

#define	RELOC(x) ((x) - KERNBASE)

###################################################################
# entry point
###################################################################



.section ".text"

# Ruogu: Code should start at 0x8000. I have no choice.

# '_start' specifies the ELF entry point.  Since we haven't set up
# virtual memory when the bootloader enters this code, we need the
# bootloader to jump to the *physical* address of the entry point.
.globl		_start
_start = RELOC(entry)

.globl entry
entry:
cps #0x13		/* Change to supervisor (SVC) mode */
# Ruogu: Set up boot stack
ldr r0, =bootstacktop
mov sp, r0

// Ruogu: DEBUG TOOL. To make ACT LET light.
/*
ldr r0, =GPIO_BASE
mov r3,#5
mov r1,#1
lsl r1,#21
str r1,[r0,#16]
mov r1,#1
lsl r1,#15
loop: 
str r1,[r0,#44]
mov r2,#0x200000
wait1:
	sub r2,#1
	ldr r4, =RELOC(wait1)
	cmp r2,#0
	bxne r4
str r1,[r0,#32]
mov r2,#0x200000
wait2:
	sub r2,#1
	ldr r4, =RELOC(wait2)
	cmp r2,#0
	bxne r4
ldr r4, =RELOC(loop)
sub r3, #1
cmp r3, #0
bxne r4 */
//DEBUG TOOL



# Ruogu: Load pgtable to the first one
ldr r0, =RELOC(entry_pgdir)
mcr p15, 0, r0, c2, c0, 0
# Ruogu: use the first table
mov r0, #0
mcr p15, 0, r0, c2, c0, 2
/* Set Domain 0 ACL to "Client", enforcing memory permissions
 * See ARM1176JZF-S manual, 3-64
 * Every mapped section/page is in domain 0
 */
mov r0, #1
mcr p15, 0, r0, c3, c0, 0
//ldr r0, =0xFFFFFFFF // 0x11 for every domain represents the MANAGER
//mcr p15, 0, r0, c3, c0, 0 //Set domain access permission
/* Read control register to r0 */
mrc p15, 0, r0, c1, c0, 0
/* Turn on MMU */
orr r0, r0, #1
/* Write value back to control register */
mcr p15, 0, r0, c1, c0, 0
// Invalidate all the TLB entries
//mov r0, #0
//mcr p15, 0, r0, c8, c7, 0



// Ruogu: DEBUG TOOL. To make ACT LET light.
/*
ldr r0, =GPIO_BASE
mov r3,#5
mov r1,#1
lsl r1,#21
str r1,[r0,#16]
mov r1,#1
lsl r1,#15
loop: 
str r1,[r0,#44]
mov r2,#0x200000
wait1:
	sub r2,#1
	ldr r4, =wait1
	cmp r2,#0
	bxne r4
str r1,[r0,#32]
mov r2,#0x200000
wait2:
	sub r2,#1
	ldr r4, =wait2
	cmp r2,#0
	bxne r4
ldr r4, =RELOC(loop)
sub r3, #1
cmp r3, #0
bxne r4 */
//DEBUG TOOL


ldr lr, =pi_init
bx lr

.data
###################################################################
# boot stack
###################################################################
# force page alignment
	.p2align	PGSHIFT		
	.globl		bootstack
bootstack:
	.space		KSTKSIZE
	.globl		bootstacktop   
bootstacktop:

